// Generated by CoffeeScript 1.3.3
(function() {
  var code1, code2, compiler, compilerEval, id1, id2, initMath, isMain, plotLines, postProcess, preProcess, predefinedCoffee, predefinedCoffeeLines, result;

  id1 = "temp1";

  id2 = "temp2";

  isMain = true;

  predefinedCoffee = "pi = Math.PI";

  predefinedCoffeeLines = predefinedCoffee.split("\n");

  initMath = function() {
    window._$_ = PaperScript._$_;
    return window.$_ = PaperScript.$_;
  };

  preProcess = function(code) {
    var codeLines, firstLine, i, isMainStr, l, lf, preamble, vanilla, _i, _len;
    lf = "\n";
    isMainStr = isMain ? 'true' : 'false';
    preamble = ["__isMain__ = " + isMainStr + lf];
    codeLines = code.split(lf);
    firstLine = codeLines[0];
    vanilla = firstLine === "#!vanilla";
    if (!vanilla) {
      initMath();
      preamble = preamble.concat(predefinedCoffeeLines);
      for (i = _i = 0, _len = codeLines.length; _i < _len; i = ++_i) {
        l = codeLines[i];
        if (l === "#!no-math-sugar") {
          codeLines[i] = "_disable_operator_overloading();";
        }
        if (l === "#!math-sugar") {
          codeLines[i] = "_enable_operator_overloading();";
        }
      }
    }
    codeLines = preamble.concat(codeLines);
    return code = codeLines.join(lf);
  };

  postProcess = function(js) {
    js = PaperScript.compile(js);
    return js;
  };

  plotLines = function(resultArray) {
    var b, d, i, idx, l, lfs, n, numLines, _i, _j, _len;
    n = null;
    numLines = resultArray.length;
    for (idx = _i = 0, _len = resultArray.length; _i < _len; idx = ++_i) {
      b = resultArray[idx];
      if ((typeof b === "string") && b.indexOf("eval_plot") !== -1) {
        n = idx;
      }
    }
    d = n ? n - numLines + 8 : 0;
    l = d && d > 0 ? d : 0;
    if (!(l > 0)) {
      return "";
    }
    lfs = "";
    for (i = _j = 1; 1 <= l ? _j <= l : _j >= l; i = 1 <= l ? ++_j : --_j) {
      lfs += this.lf;
    }
    return lfs;
  };

  compiler = $coffee.compiler({
    id: id1,
    preProcess: preProcess,
    postProcess: postProcess
  });

  compilerEval = $coffee.evaluator({
    id: id2,
    preProcess: preProcess,
    postProcess: postProcess
  });

  code1 = "a = 4; window.$rand = Math.random() + a;";

  code2 = "console.log $coffee.eval\na = 3\nx = 2+a+pi\n";

  compiler.compile(code1);

  compiler.resultStr;

  compilerEval.compile(code2);

  result = compilerEval.result + plotLines(compilerEval.resultArray);

  console.log("compiler", compiler);

  console.log("evaluator", compilerEval);

  console.log("results", $rand, result);

  console.log("$coffee", $coffee);

}).call(this);
